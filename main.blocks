<xml xmlns="https://developers.google.com/blockly/xml"><block type="mpr121_touch_on_touch_sensor_down" id="KXBlb`{;=Cr)RP.BA+@?" x="313" y="-180"><field name="sensor">TouchSensor.S2</field><statement name="HANDLER"><block type="smarthome_SwitchLampOff" id="WCp5Y0KN;es{Y8mW4yPq"><field name="lampe">lampennamen.wl</field></block></statement></block><block type="pxt-on-start" id="~Gd+cJUTVZkcP83jxLM$" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="sCcaWrZ1Ax#bt~hlRy_K" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let range: neopixel.Strip = null" numlines="1" declaredvars="range"></mutation><next><block type="typescript_statement" id="#4@u1c*[Kz0Sl?1%|tFa" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const enum TouchSensor {" line1="    S0 = 0b000000000001," line2="    S1 = 0b000000000010," line3="    S2 = 0b000000000100," line4="    S3 = 0b000000001000," line5="    S4 = 0b000000010000," line6="    S5 = 0b000000100000," line7="    S6 = 0b000001000000," line8="    S7 = 0b000010000000," line9="    S8 = 0b000100000000," line10="    S9 = 0b001000000000," line11="    // T10 = 0b010000000000, //not used" line12="    // T11 = 0b100000000000. //not used" line13="}" numlines="14"></mutation><next><block type="typescript_statement" id="+hGojGP{zHUv%Ht0EQlC" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const enum onoff {" line1="    //% block=&quot;an&quot;" line2="    on = 1," line3="    //% block=&quot;aus&quot;" line4="    off = 2," line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="q%eQpgOZ!0tNX,w-?jZ2" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const enum openclose {" line1="    //% block=&quot;öffnen&quot;" line2="    open = 1," line3="    //% block=&quot;schließen&quot;" line4="    close = 2," line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="3{P_dT1nO(T;I7CS;Ayj" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const enum lampennamen {" line1="    //% block=&quot;Deckenlampe 1&quot;" line2="    dl1 = 0," line3="    //% block=&quot;Deckenlampe 2&quot;" line4="    dl2 = 1," line5="    //% block=&quot;Außenlampe&quot;" line6="    al = 2," line7="    //% block=&quot;Wandlampe&quot;" line8="    wl = 3" line9="}" numlines="10"></mutation><next><block type="typescript_statement" id="`Kty?R%~/XL;@eW41$1R" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace smarthome {" line1="" line2="    /**" line3="     * Code für den Rolladen" line4="     * by Moritz Metelmann" line5="     */" line6="" line7="    /**" line8="    * Öffnet/Schließt den Rolladen" line9="    */" line10="    //% block=&quot;$state shades&quot;" line11="    //% block.loc.de=&quot;Rolladen $state&quot;" line12="    //% inlineInputMode=inline" line13="    export function SwitchShades(state: openclose = openclose.open) {" line14="        if (state === openclose.open) {" line15="            pins.servoWritePin(AnalogPin.C16, 0)" line16="            basic.pause(800)" line17="            pins.servoSetPulse(AnalogPin.C16, 0)" line18="        } else {" line19="            pins.servoWritePin(AnalogPin.C16, 180)" line20="            basic.pause(800)" line21="            pins.servoSetPulse(AnalogPin.C16, 0)" line22="        }" line23="    }" line24="    " line25="    /**" line26="     * Code für die Klimaanlage" line27="     * by Moritz Metelmann" line28="     */" line29="" line30="    /**" line31="    * Schaltet die Klimaanlage an/aus" line32="    */" line33="    //% block=&quot;switch aircondition $state&quot;" line34="    //% block.loc.de=&quot;schalte die Klimaanlage $state&quot;" line35="    //% inlineInputMode=inline" line36="    export function SwitchAC(state: onoff = onoff.on) {" line37="        if (state === onoff.on) {" line38="            motors.dualMotorPower(Motor.M0, 100)" line39="        } else {" line40="            motors.dualMotorPower(Motor.M0, 0)" line41="        }" line42="    }" line43="" line44="    /**" line45="    * Schaltet die Klimaanlage auf eine prozentuale Geschwindiktei" line46="    */" line47="    //% blockId=CalliBrightness block=&quot;set aircondition to %c %&quot;" line48="    //% block.loc.de=&quot;setze Klimaanlage auf %c %&quot;" line49="    //% c.defl=80" line50="    //% c.min=25 c.max=100" line51="    export function DimAC(c: number) {" line52="        if (c &lt; 25) {" line53="            c = 25" line54="        }" line55="        if (c &gt; 100) {" line56="            c = 100" line57="        }" line58="        motors.dualMotorPower(Motor.M0, c)" line59="    }" line60="" line61="    /**" line62="     * Code für NeoPixel LED's (Lampen)" line63="     * based on https://github.com/MKleinSB/pxt-callicolor/blob/master/callicolor.ts" line64="     * by Michael Klein which took parts from" line65="     * https://github.com/BrightWearables/pxt-microbit-brightboard" line66="     */" line67="" line68="    let Lampen = neopixel.create(DigitalPin.C8, 11, NeoPixelMode.RGB)" line69="    let dl1 = Lampen.range(0, 0);" line70="    let dl2 = Lampen.range(1, 1);" line71="    let al = Lampen.range(2, 2);" line72="    let wl = Lampen.range(3, 10);" line73="" line74="    let ccolors = [0xff0000, 0xFF7F00, 0xFFFE00, 0x7FFF00, 0x00FF00, 0x00FF7F," line75="        0x00FFFE, 0x0040FF, 0x0000FF, 0x6000FF, 0xFE00FF, 0xFF0040]" line76="" line77="    //% block=&quot;set wall light to $color1 $color2 $color3 $color4 $color5 $color6 $color7 $color8&quot;" line78="    //% block.loc.de=&quot;setze Wandlampe auf $color1 $color2 $color3 $color4 $color5 $color6 $color7 $color8&quot;       " line79="    //% color1.shadow=&quot;LampenColorNumberPicker&quot;  color1.defl=0xff0000" line80="    //% color2.shadow=&quot;LampenColorNumberPicker&quot;  color2.defl=0xFF7F00" line81="    //% color3.shadow=&quot;LampenColorNumberPicker&quot;  color3.defl=0xFFFE00" line82="    //% color4.shadow=&quot;LampenColorNumberPicker&quot;  color4.defl=0x7FFF00" line83="    //% color5.shadow=&quot;LampenColorNumberPicker&quot;  color5.defl=0x00FF00" line84="    //% color6.shadow=&quot;LampenColorNumberPicker&quot;  color6.defl=0x00FF7F" line85="    //% color7.shadow=&quot;LampenColorNumberPicker&quot;  color7.defl=0x00FFFE" line86="    //% color8.shadow=&quot;LampenColorNumberPicker&quot;  color8.defl=0x0040FF" line87="    //% inlineInputMode=inline" line88="    export function ShowWallLampColorPixel(color1: number, color2: number, color3: number, color4: number, color5: number, color6: number, color7: number, color8: number) {" line89="        Lampen.setPixelColor(3, color1)" line90="        Lampen.setPixelColor(4, color2)" line91="        Lampen.setPixelColor(5, color3)" line92="        Lampen.setPixelColor(6, color4)" line93="        Lampen.setPixelColor(7, color5)" line94="        Lampen.setPixelColor(8, color6)" line95="        Lampen.setPixelColor(9, color7)" line96="        Lampen.setPixelColor(10, color8)" line97="        Lampen.show()" line98="    }" line99="" line100="    /**" line101="    * Schalte eine Lampe in einer Farbe" line102="    */" line103="    //% block=&quot;set $lampe to $color&quot;" line104="    //% block.loc.de=&quot;setze $lampe auf $color&quot;" line105="    //% color.shadow=&quot;LampenColorNumberPicker&quot; color.defl='#ffffff'" line106="    //% inlineInputMode=inline" line107="    export function ShowLampColor(lampe: lampennamen=lampennamen.dl1, color: number) {" line108="        if (lampe &lt; 3) {" line109="            Lampen.setPixelColor(lampe, color)" line110="        } else { // Wandlampe" line111="            wl.showColor(color)" line112="        }" line113="        Lampen.show()" line114="    }" line115="" line116="    /**" line117="    * Schalte eine Lampe aus" line118="    */" line119="    //% block=&quot;switch $lampe off&quot;" line120="    //% block.loc.de=&quot;schalte $lampe aus&quot;" line121="    //% inlineInputMode=inline" line122="    export function SwitchLampOff(lampe: lampennamen = lampennamen.dl1) {" line123="        if (lampe &lt; 3) {" line124="            Lampen.setPixelColor(lampe, 0x000000)" line125="        } else { // Wandlampe" line126="            wl.showColor(0x000000)" line127="        }" line128="        Lampen.show()" line129="    }" line130="" line131="    /**" line132="    * Custom color picker" line133="    */" line134="    //% blockId=LampenColorNumberPicker block=&quot;%value&quot;" line135="    //% blockHidden=true" line136="    //% shim=TD_ID" line137="    //% value.fieldEditor=&quot;colornumber&quot; value.fieldOptions.decompileLiterals=true" line138="    //% weight=150" line139="    //% value.fieldOptions.colours='[&quot;#ffffff&quot;,&quot;#ff0000&quot;,&quot;#ffaa00&quot;,&quot;#ffdc00&quot;,&quot;#ffff00&quot;,&quot;#eaff00&quot;,&quot;#8eff00&quot;,&quot;#4df243&quot;,&quot;#42b87f&quot;,&quot;#00ffdc&quot;,&quot;#00dcff&quot;,&quot;#00a3ff&quot;,&quot;#0087ff&quot;,&quot;#acb3f3&quot;,&quot;#e0acfe&quot;,&quot;#a300ff&quot;,&quot;#ea00ff&quot;,&quot;#ff00e3&quot;,&quot;#fdd3f8&quot;,&quot;#f1d07e&quot;,&quot;#a8b5f5&quot;,&quot;#C3C6D8&quot;, &quot;#f3f2da&quot;,&quot;#727474&quot;, &quot;#000000&quot;]'" line140="    //% value.fieldOptions.columns=5 value.fieldOptions.className='rgbColorPicker'  " line141="    export function CalliColorNumberPicker(value: number) {" line142="        return value;" line143="    }" line144="" line145="    /**" line146="     * Code für die Touch Schalter" line147="     * based on https://github.com/mkleinsb/pxt-mpr121 by Michael Klein" line148="     * mpr 121 touch blocks based on touch.ts 0.17.5" line149="     * Auf Basis von https://github.com/1010Technologies/pxt-makerbit" line150="     * Copyright (c) 2018 Roger Wagner, Philipp Henkel &amp; Michael Klein" line151="     * MIT License" line152="     */" line153="" line154="    const MPR121_ADDRESS = 0x5A" line155="    const TOUCH_STATUS_PAUSE_BETWEEN_READ = 50" line156="" line157="    interface TouchController {" line158="        lastTouchStatus: number" line159="        lastEventValue: number" line160="    }" line161="" line162="    let touchController: TouchController" line163="" line164="    const MPR121_TOUCH_SENSOR_TOUCHED_ID = 2148" line165="    const MPR121_TOUCH_SENSOR_RELEASED_ID = 2149" line166="    " line167="" line168="    /**" line169="     * Initialize the touch controller." line170="     */" line171="" line172="    //% blockId=&quot;mpr121_touch_init&quot; block=&quot;initialisiere touch-Sensor&quot;" line173="    //% weight=70" line174="    function initTouchController(): void {" line175="" line176="        if (!!touchController) {" line177="            return" line178="        }" line179="" line180="        touchController = {" line181="            lastTouchStatus: 0," line182="            lastEventValue: 0," line183="        }" line184="" line185="        const addr = MPR121_ADDRESS" line186="        mpr121.reset(addr)" line187="" line188="        // Stop capture" line189="        mpr121.stop(addr)" line190="" line191="        // Input filter for rising state" line192="        mpr121.configure(addr, mpr121.Config.MHDR, 0x01)" line193="        mpr121.configure(addr, mpr121.Config.NHDR, 0x01)" line194="        mpr121.configure(addr, mpr121.Config.NCLR, 0x10)" line195="        mpr121.configure(addr, mpr121.Config.FDLR, 0x20)" line196="" line197="        // Input filter for falling state" line198="        mpr121.configure(addr, mpr121.Config.MHDF, 0x01)" line199="        mpr121.configure(addr, mpr121.Config.NHDF, 0x01)" line200="        mpr121.configure(addr, mpr121.Config.NCLF, 0x10)" line201="        mpr121.configure(addr, mpr121.Config.FDLF, 0x20)" line202="" line203="        // Input filter for touched state" line204="        mpr121.configure(addr, mpr121.Config.NHDT, 0x01)" line205="        mpr121.configure(addr, mpr121.Config.NCLT, 0x10)" line206="        mpr121.configure(addr, mpr121.Config.FDLT, 0xFF)" line207="" line208="        // Unused proximity sensor filter" line209="        mpr121.configure(addr, mpr121.Config.MHDPROXR, 0x0F)" line210="        mpr121.configure(addr, mpr121.Config.NHDPROXR, 0x0F)" line211="        mpr121.configure(addr, mpr121.Config.NCLPROXR, 0x00)" line212="        mpr121.configure(addr, mpr121.Config.FDLPROXR, 0x00)" line213="        mpr121.configure(addr, mpr121.Config.MHDPROXF, 0x01)" line214="        mpr121.configure(addr, mpr121.Config.NHDPROXF, 0x01)" line215="        mpr121.configure(addr, mpr121.Config.NCLPROXF, 0xFF)" line216="        mpr121.configure(addr, mpr121.Config.FDLPROXF, 0xFF)" line217="        mpr121.configure(addr, mpr121.Config.NHDPROXT, 0x00)" line218="        mpr121.configure(addr, mpr121.Config.NCLPROXT, 0x00)" line219="        mpr121.configure(addr, mpr121.Config.FDLPROXT, 0x00)" line220="" line221="        // Debounce configuration (used primarily for interrupts)" line222="        mpr121.configure(addr, mpr121.Config.DTR, 0x11)" line223="" line224="        // Electrode clock frequency etc" line225="        mpr121.configure(addr, mpr121.Config.AFE1, 0xFF)" line226="        mpr121.configure(addr, mpr121.Config.AFE2, 0x30)" line227="" line228="        // Enable autoconfiguration / calibration" line229="        mpr121.configure(addr, mpr121.Config.AUTO_CONFIG_0, 0x00)" line230="        mpr121.configure(addr, mpr121.Config.AUTO_CONFIG_1, 0x00)" line231="" line232="        // Tuning parameters for the autocalibration algorithm" line233="        mpr121.configure(addr, mpr121.Config.AUTO_CONFIG_USL, 0x00)" line234="        mpr121.configure(addr, mpr121.Config.AUTO_CONFIG_LSL, 0x00)" line235="        mpr121.configure(addr, mpr121.Config.AUTO_CONFIG_TL, 0x00)" line236="" line237="        // Default sensitivity thresholds" line238="        mpr121.configureThresholds(addr, 60, 20)" line239="" line240="        // Restart capture" line241="        mpr121.start(" line242="            addr," line243="            mpr121.CalibrationLock.BaselineTrackingAndInitialize," line244="            mpr121.Proximity.DISABLED," line245="            mpr121.Touch.ELE_0_TO_11" line246="        )" line247="        control.inBackground(detectAndNotifyTouchEvents)" line248="    }" line249="" line250="    function detectAndNotifyTouchEvents() {" line251="        let previousTouchStatus = 0" line252="        " line253="        while (true) {" line254="            const touchStatus = mpr121.readTouchStatus(MPR121_ADDRESS)" line255="            touchController.lastTouchStatus = touchStatus" line256="" line257="            for (let touchSensorBit = 1; touchSensorBit &lt;= 2048; touchSensorBit &lt;&lt;= 1) {" line258="" line259="                // Raise event when touch starts" line260="                if ((touchSensorBit &amp; touchStatus) !== 0) {" line261="                    if (!((touchSensorBit &amp; previousTouchStatus) !== 0)) {" line262="                        control.raiseEvent(MPR121_TOUCH_SENSOR_TOUCHED_ID, touchSensorBit)" line263="                        touchController.lastEventValue = touchSensorBit" line264="                    }" line265="                }" line266="" line267="                // Raise event when touch ends" line268="                if ((touchSensorBit &amp; touchStatus) === 0) {" line269="                    if (!((touchSensorBit &amp; previousTouchStatus) === 0)) {" line270="                        control.raiseEvent(MPR121_TOUCH_SENSOR_RELEASED_ID, touchSensorBit)" line271="                        touchController.lastEventValue = touchSensorBit" line272="                    }" line273="                }" line274="            }" line275="" line276="            previousTouchStatus = touchStatus" line277="" line278="            basic.pause(TOUCH_STATUS_PAUSE_BETWEEN_READ)" line279="        }" line280="    }" line281="" line282="    /**" line283="     * Mache etwas, wenn ein spezieller Sensor berührt wird." line284="     * Dieses Touch-Ereignis wird direkt zu Beginn der Berührung ausgeführt." line285="     * @param sensor der Touchsensor der überwacht werden soll, z.B.: TouchSensor.T0" line286="     * @param handler body code der bei der Berührung des Sensors ausgeführt werden soll" line287="    */" line288="" line289="    //% blockId=mpr121_touch_on_touch_sensor_down" line290="    //% block=&quot;wenn Schalter | %sensor | gedrückt&quot;" line291="    //% sensor.fieldEditor=&quot;gridpicker&quot; sensor.fieldOptions.columns=3" line292="    //% sensor.fieldOptions.tooltips=&quot;false&quot;" line293="    //% weight=65" line294="    export function onTouchSensorTouched(sensor: TouchSensor, handler: () =&gt; void) {" line295="        initTouchController()" line296="        control.onEvent(MPR121_TOUCH_SENSOR_TOUCHED_ID, sensor, () =&gt; {" line297="            setupContextAndNotify(handler)" line298="        })" line299="    }" line300=" " line301="    function setupContextAndNotify(handler: () =&gt; void) {" line302="        touchController.lastEventValue = control.eventValue()" line303="        handler()" line304="    }" line305="" line306="    // Communication module for MPR121 capacitive touch sensor controller" line307="    // https://www.sparkfun.com/datasheets/Components/MPR121.pdf" line308="    export namespace mpr121 {" line309="" line310="        export enum CalibrationLock {" line311="            BaselineTrackingOn = 0b00," line312="            BaselineTrackingOff = 0b01," line313="            BaselineTrackingAndInitializeFirst5MSB = 0b10," line314="            BaselineTrackingAndInitialize = 0b11" line315="        }" line316="" line317="        export enum Proximity {" line318="            DISABLED = 0b00," line319="            ELE0_TO_1 = 0b01," line320="            ELE_0_TO_3 = 0b10," line321="            ELE_0_TO_11 = 0b11" line322="        }" line323="" line324="        export enum Touch {" line325="            DISABLED = 0b0000," line326="            ELE_0 = 0b0001," line327="            ELE_0_TO_1 = 0b0010," line328="            ELE_0_TO_2 = 0b0011," line329="            ELE_0_TO_3 = 0b0100," line330="            ELE_0_TO_4 = 0b0101," line331="            ELE_0_TO_5 = 0b0110," line332="            ELE_0_TO_6 = 0b0111," line333="            ELE_0_TO_7 = 0b1000," line334="            ELE_0_TO_8 = 0b1001," line335="            ELE_0_TO_9 = 0b1010," line336="            ELE_0_TO_10 = 0b1011," line337="            ELE_0_TO_11 = 0b1100" line338="        }" line339="" line340="        export enum Config {" line341="            MHDR = 0x2B," line342="            NHDR = 0x2C," line343="            NCLR = 0x2D," line344="            FDLR = 0x2E," line345="            MHDF = 0x2F," line346="            NHDF = 0x30," line347="            NCLF = 0x31," line348="            FDLF = 0x32," line349="            NHDT = 0x33," line350="            NCLT = 0x34," line351="            FDLT = 0x35," line352="            MHDPROXR = 0x36," line353="            NHDPROXR = 0x37," line354="            NCLPROXR = 0x38," line355="            FDLPROXR = 0x39," line356="            MHDPROXF = 0x3A," line357="            NHDPROXF = 0x3B," line358="            NCLPROXF = 0x3C," line359="            FDLPROXF = 0x3D," line360="            NHDPROXT = 0x3E," line361="            NCLPROXT = 0x3F," line362="            FDLPROXT = 0x40," line363="            E0TTH = 0x41," line364="            E0RTH = 0x42," line365="            E1TTH = 0x43," line366="            E1RTH = 0x44," line367="            E2TTH = 0x45," line368="            E2RTH = 0x46," line369="            E3TTH = 0x47," line370="            E3RTH = 0x48," line371="            E4TTH = 0x49," line372="            E4RTH = 0x4A," line373="            E5TTH = 0x4B," line374="            E5RTH = 0x4C," line375="            E6TTH = 0x4D," line376="            E6RTH = 0x4E," line377="            E7TTH = 0x4F," line378="            E7RTH = 0x50," line379="            E8TTH = 0x51," line380="            E8RTH = 0x52," line381="            E9TTH = 0x53," line382="            E9RTH = 0x54," line383="            E10TTH = 0x55," line384="            E10RTH = 0x56," line385="            E11TTH = 0x57," line386="            E11RTH = 0x58," line387="            E12TTH = 0x59," line388="            E12RTH = 0x5A," line389="            DTR = 0x5B," line390="            AFE1 = 0x5C," line391="            AFE2 = 0x5D," line392="            ECR = 0x5E," line393="            CDC0 = 0x5F," line394="            CDC1 = 0x60," line395="            CDC2 = 0x62," line396="            CDC4 = 0x63," line397="            CDC5 = 0x64," line398="            CDC6 = 0x65," line399="            CDC7 = 0x66," line400="            CDC8 = 0x67," line401="            CDC9 = 0x68," line402="            CDC10 = 0x69," line403="            CDC11 = 0x6A," line404="            CDC12 = 0x6B," line405="            CDT_0_1 = 0x6C," line406="            CDT_2_3 = 0x6D," line407="            CDT_4_5 = 0x6E," line408="            CDT_6_7 = 0x6F," line409="            CDT_8_9 = 0x70," line410="            CDT_10_11 = 0x71," line411="            CDT_12 = 0x72," line412="            GPIO_CTL0 = 0x73," line413="            GPIO_CTL1 = 0x74," line414="            GPIO_DIR = 0x76," line415="            GPIO_EN = 0x77," line416="            GPIO_SET = 0x78," line417="            GPIO_CLR = 0x79," line418="            GPIO_TOG = 0x7A," line419="            AUTO_CONFIG_0 = 0x7B," line420="            AUTO_CONFIG_1 = 0x7C," line421="            AUTO_CONFIG_USL = 0x7D," line422="            AUTO_CONFIG_LSL = 0x7E," line423="            AUTO_CONFIG_TL = 0x7F" line424="        }" line425="" line426="        let commandDataBuffer: Buffer" line427="        let commandBuffer: Buffer" line428="" line429="        function writeCommandData(address: number, command: number, data: number): void {" line430="            if (!commandDataBuffer) {" line431="                commandDataBuffer = pins.createBuffer(pins.sizeOf(NumberFormat.UInt16BE))" line432="            }" line433="            commandDataBuffer.setNumber(NumberFormat.UInt16BE, 0, (command &lt;&lt; 8) | data)" line434="            pins.i2cWriteBuffer(address, commandDataBuffer)" line435="        }" line436="" line437="        function writeCommand(address: number, command: number): void {" line438="            if (!commandBuffer) {" line439="                commandBuffer = pins.createBuffer(pins.sizeOf(NumberFormat.UInt8BE))" line440="            }" line441="            commandBuffer.setNumber(NumberFormat.UInt8BE, 0, command)" line442="            pins.i2cWriteBuffer(address, commandBuffer)" line443="        }" line444="" line445="        export function configure(address: number, register: Config, value: number): void {" line446="            writeCommandData(address, register, value)" line447="        }" line448="" line449="        export function configureThresholds(address: number, touch: number, release: number): void {" line450="            for (let k = 0; k &lt; 12; k++) {" line451="                configure(address, Config.E0TTH + k * 2, touch)" line452="                configure(address, Config.E0RTH + k * 2, release)" line453="            }" line454="        }" line455="" line456="        export function reset(address: number): void {" line457="            writeCommandData(address, 0x80, 0x63)" line458="            basic.pause(30)" line459="        }" line460="" line461="        export function stop(address: number): void {" line462="            writeCommandData(address, Config.ECR, 0x0)" line463="        }" line464="" line465="        export function start(address: number, cl: CalibrationLock, eleprox: Proximity, ele: Touch): void {" line466="            writeCommandData(address, Config.ECR, (cl &lt;&lt; 6) | (eleprox &lt;&lt; 4) | ele)" line467="        }" line468="" line469="        export function readTouchStatus(address: number): number {" line470="            writeCommand(address, 0x0)" line471="            return pins.i2cReadNumber(address, NumberFormat.UInt16LE)" line472="        }" line473="    }" line474="" line475="    /**" line476="     * Code for the presence controller." line477="     * by Moritz Metelmann" line478="     */" line479="" line480="    interface PresenceDetector {" line481="        lastPresenceDetection: boolean" line482="    }" line483="" line484="    let presenceDetector: PresenceDetector" line485="    const PRESENCE_DETECTED_ID = 2147" line486="" line487="    /**" line488="     * Initialize the presence controller." line489="     */" line490="" line491="    //% blockId=&quot;presence_init&quot; block=&quot;initialisiere Präsenz-Sensor&quot;" line492="    //% weight=70" line493="    function initPresenceDetector(): void {" line494="" line495="        if (!!presenceDetector) {" line496="            return" line497="        }" line498="" line499="        presenceDetector = {" line500="            lastPresenceDetection: false" line501="        }" line502="" line503="        control.inBackground(detectAndNotifyPresenceDetector)" line504="    }" line505="" line506="    function detectAndNotifyPresenceDetector() {" line507="        let previousPresenceStatus = false;" line508="" line509="        while (true) {" line510="            if (previousPresenceStatus == false &amp;&amp; pins.digitalReadPin(DigitalPin.C9) == 0) {" line511="                control.raiseEvent(PRESENCE_DETECTED_ID, 0);" line512="                previousPresenceStatus = true;" line513="            }" line514="            if (previousPresenceStatus == true &amp;&amp; pins.digitalReadPin(DigitalPin.C9) == 1) {" line515="                previousPresenceStatus = false;" line516="            }" line517="" line518="            basic.pause(TOUCH_STATUS_PAUSE_BETWEEN_READ)" line519="        }" line520="" line521="" line522="    }" line523="" line524="    //% blockId=smarthome_presence_detected" line525="    //% block=&quot;wenn Präsenz gemeldet&quot;" line526="    //% weight=65" line527="    export function onPresenceDetected(handler: () =&gt; void) {" line528="        initPresenceDetector();" line529="        control.onEvent(PRESENCE_DETECTED_ID, EventBusValue.MICROBIT_EVT_ANY, () =&gt; {" line530="            handler();" line531="        })" line532="    }" line533="}" numlines="534"></mutation><next><block type="device_show_leds" id="5rp*_~-#k6esnnvg?.{p"><field name="LEDS">`
        . . . . . 
        . . . . . 
        . . # . . 
        . . . . . 
        . . . . .
        `</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="mpr121_touch_on_touch_sensor_down" id="a$d**c|JAbP!7gSW7xTn" x="312" y="24"><field name="sensor">TouchSensor.S0</field><statement name="HANDLER"><block type="smarthome_ShowWallLampColorPixel" id="8!k:XH-2A4p%yfC0Jm.4"><value name="color1"><shadow type="LampenColorNumberPicker" id="ZQfobWXL-Ba1TrN0D8ZY"><field name="value">0xe0acfe</field></shadow></value><value name="color2"><shadow type="LampenColorNumberPicker" id="5NR!8nBCXC%[|Ef7C]H|"><field name="value">0xff00e3</field></shadow></value><value name="color3"><shadow type="LampenColorNumberPicker" id="?HrX[9M8$kjhO(sElt{b"><field name="value">0xa300ff</field></shadow></value><value name="color4"><shadow type="LampenColorNumberPicker" id="(xyH@CH2|7|,D9Dc{|7s"><field name="value">0x00dcff</field></shadow></value><value name="color5"><shadow type="LampenColorNumberPicker" id="]4OQqTPo5=:EpI;hrp%["><field name="value">0xffaa00</field></shadow></value><value name="color6"><shadow type="LampenColorNumberPicker" id="X7hK@iLEF:YJxA^{@$i$"><field name="value">0xeaff00</field></shadow></value><value name="color7"><shadow type="LampenColorNumberPicker" id="=7Q}g(z.ZaMrXE_O0)QD"><field name="value">0x00FFFE</field></shadow></value><value name="color8"><shadow type="LampenColorNumberPicker" id="JJDdiR`hxg3,@fubrL`)"><field name="value">0xfdd3f8</field></shadow></value><next><block type="smarthome_SwitchShades" id="ymaSJp]I0I/AxRy;H$c6"><field name="state">openclose.open</field></block></next></block></statement></block><block type="device_set_servo_pin" id="9B@8e5cf14uv?{lMJ#J@" disabled="true" x="732" y="201"><field name="name">AnalogPin.C16</field><value name="value"><shadow type="math_number_minmax" id="fBSx;aEfCF~nl,OpN)$=" disabled="true"><mutation min="0" max="180" label="Number" precision="0"></mutation><field name="SLIDER">3</field></shadow></value><next><block type="device_pause" id=",Q!SFkUn-s5+t5~W654@" disabled="true"><value name="pause"><shadow type="timePicker" id="D2@,oOA?r%fC789=j}y0" disabled="true"><field name="ms">1000</field></shadow></value><next><block type="device_set_digital_pin" id="L/nj-TGaCe()_HFcz~uN" disabled="true"><field name="name">DigitalPin.C16</field><value name="value"><shadow type="math_number_minmax" id=",~1:rd3!@kD9hWX.^%5u" disabled="true"><mutation min="0" max="1" label="Number" precision="0"></mutation><field name="SLIDER">0</field></shadow></value></block></next></block></next></block><block type="smarthome_ShowLampColor" id="?;`+.(`QBWs?9iPkx=63" disabled="true" x="-95" y="303"><field name="lampe">lampennamen.dl1</field><value name="color"><shadow type="LampenColorNumberPicker" id="|%@,9#=[m%aY2q;SgkoP" disabled="true"><field name="value">0xffffff</field></shadow></value></block><block type="mpr121_touch_on_touch_sensor_down" id="j$#f%D*QF58u~t.Zw(fe" x="414" y="429"><field name="sensor">TouchSensor.S3</field><statement name="HANDLER"><block type="smarthome_ShowLampColor" id="LNolhkgF1`)MWP?($3V*"><field name="lampe">lampennamen.dl1</field><value name="color"><shadow type="LampenColorNumberPicker" id="!)|7;]|w[ci$!Dg!D~jL"><field name="value">0xffffff</field></shadow></value></block></statement></block><block type="mpr121_touch_on_touch_sensor_down" id="eHBLfoggBC}#F_KtrN_)" x="328" y="544"><field name="sensor">TouchSensor.S4</field><statement name="HANDLER"><block type="smarthome_SwitchLampOff" id=".g5Z|lkaZ@ek5|OsrfdD"><field name="lampe">lampennamen.dl1</field></block></statement></block><block type="mpr121_touch_on_touch_sensor_down" id="LjfpWXfs-Zo-`}jEjjom" x="644" y="605"><field name="sensor">TouchSensor.S1</field><statement name="HANDLER"><block type="smarthome_ShowWallLampColorPixel" id="k8H|4*G/yZqI(otgy}@`"><value name="color1"><shadow type="LampenColorNumberPicker" id="JTL:W)mX{mLF%YOf2A:|"><field name="value">0x4df243</field></shadow></value><value name="color2"><shadow type="LampenColorNumberPicker" id="1?CeMm~/1F;U2=/^(!Ua"><field name="value">0x0087ff</field></shadow></value><value name="color3"><shadow type="LampenColorNumberPicker" id="f!ySMnT1zd*_Vt[f@F*^"><field name="value">0xfdd3f8</field></shadow></value><value name="color4"><shadow type="LampenColorNumberPicker" id="8)b}24P4byqmgn76dL+$"><field name="value">0x7FFF00</field></shadow></value><value name="color5"><shadow type="LampenColorNumberPicker" id="pJDW2vFX/7IH2+DD}khx"><field name="value">0x00FF00</field></shadow></value><value name="color6"><shadow type="LampenColorNumberPicker" id="N|@`/c@Q5o/FBI48|@87"><field name="value">0x00FF7F</field></shadow></value><value name="color7"><shadow type="LampenColorNumberPicker" id=":w*tUhxif7t=NXj()oy?"><field name="value">0x00FFFE</field></shadow></value><value name="color8"><shadow type="LampenColorNumberPicker" id="hrUppa3/oi#Fd(!3t.Iv"><field name="value">0x0040FF</field></shadow></value><next><block type="smarthome_SwitchShades" id="Awr^P_,=CPZ@%vT[oBqk"><field name="state">openclose.close</field></block></next></block></statement></block><block type="mpr121_touch_on_touch_sensor_down" id="(%d*U~i%X(3tCXIPGANg" x="322" y="770"><field name="sensor">TouchSensor.S6</field><statement name="HANDLER"><block type="smarthome_SwitchAC" id="2S5JA%tq~6)+iKKV?ST)"><field name="state">onoff.on</field></block></statement></block><block type="block_dual_motor" id="lqLA%_Y*W)4vo{d~N6j0" disabled="true" x="777" y="816"><field name="motor">Motor.M0</field><value name="percent"><shadow type="speedPicker" id="U!xSrO)|uINoy@Y7_u;%" disabled="true"><field name="speed">100</field></shadow></value></block><block type="mpr121_touch_on_touch_sensor_down" id="vN(5]:@*;]e+0h`A_g.P" x="330" y="917"><field name="sensor">TouchSensor.S7</field><statement name="HANDLER"><block type="smarthome_SwitchAC" id="=M8P3:Tpo%d.ufo`AE,~"><field name="state">onoff.off</field></block></statement></block><block type="block_dual_motor" id="(sZ?i2_`Y@*P@#(bU#,A" disabled="true" x="763" y="930"><field name="motor">Motor.M0</field><value name="percent"><shadow type="speedPicker" id="|l)0#t~VXFQKv56V[zd=" disabled="true"><field name="speed">0</field></shadow></value></block><block type="mpr121_touch_on_touch_sensor_down" id="58yCJIABVJTFQ]pCCR`3" x="328" y="1082"><field name="sensor">TouchSensor.S8</field><statement name="HANDLER"><block type="CalliBrightness" id="r2z(TL!__xD!TKW/xr/_"><value name="c"><shadow type="math_number_minmax" id="Lj#OC|cKzq?t4-30Nj-_"><mutation min="25" max="100" label="Number" precision="0"></mutation><field name="SLIDER">10</field></shadow></value></block></statement></block><block type="device_set_servo_pin" id="b4Gxon{ahS!cYPiRFR=+" disabled="true" x="696" y="1064"><field name="name">AnalogPin.C16</field><value name="value"><shadow type="math_number_minmax" id="=M4H2!yb=qri`CM)9xRG" disabled="true"><mutation min="0" max="180" label="Number" precision="0"></mutation><field name="SLIDER">180</field></shadow></value><next><block type="device_pause" id="i|Q#gG:]X!r}p9MOWW[k" disabled="true"><value name="pause"><shadow type="timePicker" id=")DuK)X_iws^#}X_wGc#_" disabled="true"><field name="ms">1000</field></shadow></value><next><block type="device_set_digital_pin" id="qRYBlA2BerZ*)3}bn!Jf" disabled="true"><field name="name">DigitalPin.C16</field><value name="value"><shadow type="math_number_minmax" id="ZoQ7uuaW)bTK[-QRjjsP" disabled="true"><mutation min="0" max="1" label="Number" precision="0"></mutation><field name="SLIDER">0</field></shadow></value></block></next></block></next></block><block type="device_forever" id=",Py.W1gyYtR;1LlN-2~I" x="264" y="17787"></block><block type="device_button_selected_event" id="CK+[54jsgRwafbgnqfY*" x="180" y="18847"><field name="NAME">Button.A</field><value name="eventType"><shadow type="control_button_event_click" id="5L|l:,LEC5hG}Ju,Iwi2"></shadow></value><statement name="HANDLER"><block type="basic_show_icon" id="~t3-M1w3Y7T].V@7+I58"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="i">IconNames.No</field></block></statement></block><block type="device_button_selected_event" id="OgdmeP*ec[;Q0qIi+jF|" x="-311" y="18883"><field name="NAME">Button.B</field><value name="eventType"><shadow type="control_button_event_click" id="4e!HGsr%D?yi,yM7IP;L"></shadow></value></block></xml>